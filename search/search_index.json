{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pure Python Module for CAEN High Voltage Modules No compilation required. Just CAENHVWrapper Linux library. Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#pure-python-module-for-caen-high-voltage-modules","text":"No compilation required. Just CAENHVWrapper Linux library.","title":"Pure Python Module for CAEN High Voltage Modules"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"configuration/","text":"Configuration Using the hvconfig script, CAEN HV modules can be setup automatically using a configuration file. The format of the configuration file is .toml and its structure should be the following: Example The following example configuration will configure a single V65XX module, referneced as test , on address 0_0_00000000 , connected through an USB port. Channel 1 voltage will be set to 500V and the current will be 1 mA. The voltage for all other channels will be set to 350V and current to 500 uA. [hv] [hv.test] board = \"V65XX\" link = \"USB\" address = \"0_0_00000000\" [hv.test.channels] [hv.test.channels.default] VSet = 350 ISet = 500 [hv.test.channels.channel.1] VSet = 500 ISet = 1000 hv * (Mandatory) Holds information about all HV boards. hv.<NAME> * (Mandatory) Configuration for board \"NAME\". board * (Mandatory) Board type. Should be one of: link * (Mandatory) Link type. Should be one of: address * (Mandatory) Address information of the board. Depends on the link type. user (Optional) User name of the module. Use only if it is set. password (Optional) Password. Used in combination with user . hv.<NAME>.channels Channels configuration. hv.<NAME>.channels.default (Optional) Default values for all channels, except those specified in hv.<NAME>.channels.channel section. User can set all the R/W or W properties for a given module's channels by using their name. For example: VSet will set the voltage ISet will set the current hv.<NAME>.channels.channel.<NUMBER> Set properties for a specific channel NUMBER in module NAME . NUMBER should be a number in the allowed range of channels for the given module. User can set all the R/W or W properties for a given module's channels by using their name. For example: VSet will set the voltage ISet will set the current","title":"Configuration"},{"location":"configuration/#configuration","text":"Using the hvconfig script, CAEN HV modules can be setup automatically using a configuration file. The format of the configuration file is .toml and its structure should be the following:","title":"Configuration"},{"location":"configuration/#example","text":"The following example configuration will configure a single V65XX module, referneced as test , on address 0_0_00000000 , connected through an USB port. Channel 1 voltage will be set to 500V and the current will be 1 mA. The voltage for all other channels will be set to 350V and current to 500 uA. [hv] [hv.test] board = \"V65XX\" link = \"USB\" address = \"0_0_00000000\" [hv.test.channels] [hv.test.channels.default] VSet = 350 ISet = 500 [hv.test.channels.channel.1] VSet = 500 ISet = 1000","title":"Example"},{"location":"configuration/#hv","text":"","title":"hv*"},{"location":"configuration/#mandatory","text":"Holds information about all HV boards.","title":"(Mandatory)"},{"location":"configuration/#hvname","text":"","title":"hv.&lt;NAME&gt;*"},{"location":"configuration/#mandatory_1","text":"Configuration for board \"NAME\".","title":"(Mandatory)"},{"location":"configuration/#board","text":"","title":"board*"},{"location":"configuration/#mandatory_2","text":"Board type. Should be one of:","title":"(Mandatory)"},{"location":"configuration/#link","text":"","title":"link*"},{"location":"configuration/#mandatory_3","text":"Link type. Should be one of:","title":"(Mandatory)"},{"location":"configuration/#address","text":"","title":"address*"},{"location":"configuration/#mandatory_4","text":"Address information of the board. Depends on the link type.","title":"(Mandatory)"},{"location":"configuration/#user","text":"","title":"user"},{"location":"configuration/#optional","text":"User name of the module. Use only if it is set.","title":"(Optional)"},{"location":"configuration/#password","text":"","title":"password"},{"location":"configuration/#optional_1","text":"Password. Used in combination with user .","title":"(Optional)"},{"location":"configuration/#hvnamechannels","text":"Channels configuration.","title":"hv.&lt;NAME&gt;.channels"},{"location":"configuration/#hvnamechannelsdefault","text":"","title":"hv.&lt;NAME&gt;.channels.default"},{"location":"configuration/#optional_2","text":"Default values for all channels, except those specified in hv.<NAME>.channels.channel section. User can set all the R/W or W properties for a given module's channels by using their name. For example: VSet will set the voltage ISet will set the current","title":"(Optional)"},{"location":"configuration/#hvnamechannelschannelnumber","text":"Set properties for a specific channel NUMBER in module NAME . NUMBER should be a number in the allowed range of channels for the given module. User can set all the R/W or W properties for a given module's channels by using their name. For example: VSet will set the voltage ISet will set the current","title":"hv.&lt;NAME&gt;.channels.channel.&lt;NUMBER&gt;"},{"location":"context-reference/","text":"Context HVContext CAEN HV Module Context Usage: with HVContext ( \"\" ) as hv : hv . read ( ... ) __enter__ ( self ) special Enter context Initializes module by calling the start() method Source code in pycaenhv/context.py def __enter__ ( self ): \"\"\" Enter context Initializes module by calling the `start()` method \"\"\" self . start () return self __exit__ ( self , type , value , traceback ) special Exit context. Executes close() method to de-initialize the module before exit. Source code in pycaenhv/context.py def __exit__ ( self , type , value , traceback ): \"\"\" Exit context. Executes `close()` method to de-initialize the module before exit. \"\"\" self . close () close ( self ) Deinitialize the system Source code in pycaenhv/context.py def close ( self ) -> None : \"\"\" Deinitialize the system \"\"\" deinit_system ( self . handle ) start ( self ) Initialize module given the configuration in the constructor. Source code in pycaenhv/context.py def start ( self ): \"\"\" Initialize module given the configuration in the constructor. \"\"\" system = CAENHV_SYSTEM_TYPE [ self . system . upper ()] link = LinkType [ self . link . upper ()] self . handle = init_system ( system , link , self . argument , self . user , self . password )","title":"Context"},{"location":"context-reference/#context","text":"","title":"Context"},{"location":"context-reference/#pycaenhv.context.HVContext","text":"CAEN HV Module Context","title":"HVContext"},{"location":"context-reference/#pycaenhv.context.HVContext--usage","text":"with HVContext ( \"\" ) as hv : hv . read ( ... )","title":"Usage:"},{"location":"context-reference/#pycaenhv.context.HVContext.__enter__","text":"Enter context Initializes module by calling the start() method Source code in pycaenhv/context.py def __enter__ ( self ): \"\"\" Enter context Initializes module by calling the `start()` method \"\"\" self . start () return self","title":"__enter__()"},{"location":"context-reference/#pycaenhv.context.HVContext.__exit__","text":"Exit context. Executes close() method to de-initialize the module before exit. Source code in pycaenhv/context.py def __exit__ ( self , type , value , traceback ): \"\"\" Exit context. Executes `close()` method to de-initialize the module before exit. \"\"\" self . close ()","title":"__exit__()"},{"location":"context-reference/#pycaenhv.context.HVContext.close","text":"Deinitialize the system Source code in pycaenhv/context.py def close ( self ) -> None : \"\"\" Deinitialize the system \"\"\" deinit_system ( self . handle )","title":"close()"},{"location":"context-reference/#pycaenhv.context.HVContext.start","text":"Initialize module given the configuration in the constructor. Source code in pycaenhv/context.py def start ( self ): \"\"\" Initialize module given the configuration in the constructor. \"\"\" system = CAENHV_SYSTEM_TYPE [ self . system . upper ()] link = LinkType [ self . link . upper ()] self . handle = init_system ( system , link , self . argument , self . user , self . password )","title":"start()"},{"location":"functions-reference/","text":"Functions Python ctypes wrappers for CAENHVLib functions. CAENHV_InitSystem Initialize module C Signature CAENHVLIB_API CAENHVRESULT CAENHV_InitSystem ( CAENHV_SYSTEM_TYPE_t system , int LinkType , void * Arg , const char * UserName , const char * Passwd , int * handle ); CAENHVLibSwRel Software release C Signature CAENHVLIB_API char * CAENHVLibSwRel ( void )","title":"Functions"},{"location":"functions-reference/#functions","text":"Python ctypes wrappers for CAENHVLib functions.","title":"Functions"},{"location":"functions-reference/#pycaenhv.functions.CAENHV_InitSystem","text":"Initialize module","title":"CAENHV_InitSystem"},{"location":"functions-reference/#pycaenhv.functions.CAENHV_InitSystem--c-signature","text":"CAENHVLIB_API CAENHVRESULT CAENHV_InitSystem ( CAENHV_SYSTEM_TYPE_t system , int LinkType , void * Arg , const char * UserName , const char * Passwd , int * handle );","title":"C Signature"},{"location":"functions-reference/#pycaenhv.functions.CAENHVLibSwRel","text":"Software release","title":"CAENHVLibSwRel"},{"location":"functions-reference/#pycaenhv.functions.CAENHVLibSwRel--c-signature","text":"CAENHVLIB_API char * CAENHVLibSwRel ( void )","title":"C Signature"},{"location":"installation/","text":"","title":"Installation"},{"location":"scripts/","text":"Scripts caenhv Command line tool for CAEN HV modules. hvconfig Configure one or many CAEN HV modules using a .toml configuration file. hvconfig","title":"Scripts"},{"location":"scripts/#scripts","text":"","title":"Scripts"},{"location":"scripts/#caenhv","text":"Command line tool for CAEN HV modules.","title":"caenhv"},{"location":"scripts/#hvconfig","text":"Configure one or many CAEN HV modules using a .toml configuration file. hvconfig","title":"hvconfig"},{"location":"wrappers-reference/","text":"Wrappers module Wraps CANEHVWrapper C functions into Python functions. deinit_system ( handle ) Deinitialize system Source code in pycaenhv/wrappers.py def deinit_system ( handle : int ) -> None : \"\"\" Deinitialize system \"\"\" err = CAENHV_DeinitSystem ( handle ) check_function_output ( err ) get_board_parameters ( handle , slot ) List all available board parameters Source code in pycaenhv/wrappers.py def get_board_parameters ( handle : int , slot : int ) -> Union [ None , List [ str ]]: \"\"\" List all available board parameters \"\"\" _slot = c_ushort ( slot ) # apply the appropriate type raw_param_list = c_char_p () # result will be stored here err = CAENHV_GetBdParamInfo ( handle , _slot , byref ( raw_param_list )) check_function_output ( err ) result = get_char_list ( raw_param_list , MAX_PARAM_NAME ) return result get_channel_parameter ( handle , slot , channel , param_name ) Get the value of a channel channel parameter param_name Source code in pycaenhv/wrappers.py def get_channel_parameter ( handle : int , slot : int , channel : int , param_name : str , # channel_list: Optional[List[str]] = None, ) -> Any : \"\"\" Get the value of a channel `channel` parameter `param_name` \"\"\" type_ = get_channel_parameter_property ( handle = handle , slot = slot , channel = channel , param_name = param_name , prop_name = \"Type\" ) _res = ParameterTypes [ type_ ]() _slot = c_ushort ( slot ) _param = c_char_p ( param_name . encode ()) _ch_list = ( c_ushort * 1 )() _ch_list [ 0 ] = channel err = CAENHV_GetChParam ( handle , _slot , _param , 1 , _ch_list , byref ( _res )) check_function_output ( err ) return _res . value get_channel_parameter_property ( handle , slot , channel , param_name , prop_name ) Get channel parameter's property value Source code in pycaenhv/wrappers.py def get_channel_parameter_property ( handle : int , slot : int , channel : int , param_name : str , prop_name : str ) -> Any : \"\"\" Get channel parameter's property value \"\"\" # Set appropriate types _slot = c_ushort ( slot ) _ch = c_ushort ( channel ) _param = c_char_p ( param_name . encode ()) _prop = c_char_p ( prop_name . encode ()) # Set the result type according to property name _res = PropertyTypes [ prop_name ]() err = CAENHV_GetChParamProp ( handle , _slot , _ch , _param , _prop , byref ( _res )) check_function_output ( err ) # FIX: will fail for Enum # FIX: fails for char return _res . value get_channel_parameters ( handle , slot , channel ) List all available board parameters Source code in pycaenhv/wrappers.py def get_channel_parameters ( handle : int , slot : int , channel : int ) -> List [ str ]: \"\"\" List all available board parameters \"\"\" _slot = c_ushort ( slot ) _ch = c_ushort ( channel ) raw_char_list = c_char_p () _count = c_int () err = CAENHV_GetChParamInfo ( handle , _slot , _ch , byref ( raw_char_list ), byref ( _count )) check_function_output ( err ) count = _count . value result = [ get_strlist_element ( raw_char_list , i , MAX_PARAM_NAME ) for i in range ( count ) ] return result get_crate_map ( handle ) Get crate map Source code in pycaenhv/wrappers.py def get_crate_map ( handle : int ) -> Dict [ str , Any ]: \"\"\" Get crate map \"\"\" _slots = c_ushort () _channels = P ( c_ushort )() _models = c_char_p () _descriptions = c_char_p () _serial_numbers = P ( c_ushort )() _fw_min_rel = P ( c_ubyte )() _fw_max_rel = P ( c_ubyte )() err = CAENHV_GetCrateMap ( handle , byref ( _slots ), byref ( _channels ), byref ( _models ), byref ( _descriptions ), byref ( _serial_numbers ), byref ( _fw_min_rel ), byref ( _fw_max_rel )) check_function_output ( err ) slots = _slots . value channels = [ _channels [ i ] for i in range ( slots )] models = iter_str_list ( _models , slots ) descriptions = iter_str_list ( _descriptions , slots ) serial_numbers = [ _serial_numbers [ i ] for i in range ( slots )] firmware_releases = [( _fw_max_rel [ i ], _fw_min_rel [ i ]) for i in range ( slots )] result = dict ( slots = slots , channels = channels , models = models , descriptions = descriptions , serial_numbers = serial_numbers , firmware_releases = firmware_releases ) return result init_system ( system_type , link_type , argument , username = '' , password = '' ) Initialize the system and returns the handle Source code in pycaenhv/wrappers.py def init_system ( system_type : Union [ CAENHV_SYSTEM_TYPE , int ], link_type : Union [ LinkType , int ], argument : Any , username : str = '' , password : str = '' ) -> int : \"\"\" Initialize the system and returns the handle \"\"\" _handle = c_int () _system = int ( system_type ) _link = int ( link_type ) _arg = argument if isinstance ( _arg , str ): _arg = _arg . encode () err = CAENHV_InitSystem ( _system , _link , _arg , username . encode (), password . encode (), byref ( _handle )) check_function_output ( err ) return _handle . value set_channel_parameter ( handle , slot , channel , param_name , value ) Set channel parameter's value Source code in pycaenhv/wrappers.py def set_channel_parameter ( handle : int , slot : int , channel : int , param_name : str , value : Any ): \"\"\" Set channel parameter's value \"\"\" type_ = get_channel_parameter_property ( handle , slot , channel , param_name , \"Type\" ) _value = ParameterTypes [ type_ ]( ParameterPythonTypes [ type_ ]( value )) _slot = c_ushort ( slot ) _ch = c_ushort ( channel ) _param = c_char_p ( param_name . encode ()) _ch_list = ( c_ushort * 1 )() _ch_list [ 0 ] = channel res = CAENHV_SetChParam ( handle , _slot , _param , _ch , _ch_list , byref ( _value )) check_function_output ( res ) software_release () Returns the software release of the library Source code in pycaenhv/wrappers.py def software_release () -> str : \"\"\" Returns the software release of the library \"\"\" return CAENHVLibSwRel () . decode ()","title":"Wrappers"},{"location":"wrappers-reference/#wrappers-module","text":"Wraps CANEHVWrapper C functions into Python functions.","title":"Wrappers module"},{"location":"wrappers-reference/#pycaenhv.wrappers.deinit_system","text":"Deinitialize system Source code in pycaenhv/wrappers.py def deinit_system ( handle : int ) -> None : \"\"\" Deinitialize system \"\"\" err = CAENHV_DeinitSystem ( handle ) check_function_output ( err )","title":"deinit_system()"},{"location":"wrappers-reference/#pycaenhv.wrappers.get_board_parameters","text":"List all available board parameters Source code in pycaenhv/wrappers.py def get_board_parameters ( handle : int , slot : int ) -> Union [ None , List [ str ]]: \"\"\" List all available board parameters \"\"\" _slot = c_ushort ( slot ) # apply the appropriate type raw_param_list = c_char_p () # result will be stored here err = CAENHV_GetBdParamInfo ( handle , _slot , byref ( raw_param_list )) check_function_output ( err ) result = get_char_list ( raw_param_list , MAX_PARAM_NAME ) return result","title":"get_board_parameters()"},{"location":"wrappers-reference/#pycaenhv.wrappers.get_channel_parameter","text":"Get the value of a channel channel parameter param_name Source code in pycaenhv/wrappers.py def get_channel_parameter ( handle : int , slot : int , channel : int , param_name : str , # channel_list: Optional[List[str]] = None, ) -> Any : \"\"\" Get the value of a channel `channel` parameter `param_name` \"\"\" type_ = get_channel_parameter_property ( handle = handle , slot = slot , channel = channel , param_name = param_name , prop_name = \"Type\" ) _res = ParameterTypes [ type_ ]() _slot = c_ushort ( slot ) _param = c_char_p ( param_name . encode ()) _ch_list = ( c_ushort * 1 )() _ch_list [ 0 ] = channel err = CAENHV_GetChParam ( handle , _slot , _param , 1 , _ch_list , byref ( _res )) check_function_output ( err ) return _res . value","title":"get_channel_parameter()"},{"location":"wrappers-reference/#pycaenhv.wrappers.get_channel_parameter_property","text":"Get channel parameter's property value Source code in pycaenhv/wrappers.py def get_channel_parameter_property ( handle : int , slot : int , channel : int , param_name : str , prop_name : str ) -> Any : \"\"\" Get channel parameter's property value \"\"\" # Set appropriate types _slot = c_ushort ( slot ) _ch = c_ushort ( channel ) _param = c_char_p ( param_name . encode ()) _prop = c_char_p ( prop_name . encode ()) # Set the result type according to property name _res = PropertyTypes [ prop_name ]() err = CAENHV_GetChParamProp ( handle , _slot , _ch , _param , _prop , byref ( _res )) check_function_output ( err ) # FIX: will fail for Enum # FIX: fails for char return _res . value","title":"get_channel_parameter_property()"},{"location":"wrappers-reference/#pycaenhv.wrappers.get_channel_parameters","text":"List all available board parameters Source code in pycaenhv/wrappers.py def get_channel_parameters ( handle : int , slot : int , channel : int ) -> List [ str ]: \"\"\" List all available board parameters \"\"\" _slot = c_ushort ( slot ) _ch = c_ushort ( channel ) raw_char_list = c_char_p () _count = c_int () err = CAENHV_GetChParamInfo ( handle , _slot , _ch , byref ( raw_char_list ), byref ( _count )) check_function_output ( err ) count = _count . value result = [ get_strlist_element ( raw_char_list , i , MAX_PARAM_NAME ) for i in range ( count ) ] return result","title":"get_channel_parameters()"},{"location":"wrappers-reference/#pycaenhv.wrappers.get_crate_map","text":"Get crate map Source code in pycaenhv/wrappers.py def get_crate_map ( handle : int ) -> Dict [ str , Any ]: \"\"\" Get crate map \"\"\" _slots = c_ushort () _channels = P ( c_ushort )() _models = c_char_p () _descriptions = c_char_p () _serial_numbers = P ( c_ushort )() _fw_min_rel = P ( c_ubyte )() _fw_max_rel = P ( c_ubyte )() err = CAENHV_GetCrateMap ( handle , byref ( _slots ), byref ( _channels ), byref ( _models ), byref ( _descriptions ), byref ( _serial_numbers ), byref ( _fw_min_rel ), byref ( _fw_max_rel )) check_function_output ( err ) slots = _slots . value channels = [ _channels [ i ] for i in range ( slots )] models = iter_str_list ( _models , slots ) descriptions = iter_str_list ( _descriptions , slots ) serial_numbers = [ _serial_numbers [ i ] for i in range ( slots )] firmware_releases = [( _fw_max_rel [ i ], _fw_min_rel [ i ]) for i in range ( slots )] result = dict ( slots = slots , channels = channels , models = models , descriptions = descriptions , serial_numbers = serial_numbers , firmware_releases = firmware_releases ) return result","title":"get_crate_map()"},{"location":"wrappers-reference/#pycaenhv.wrappers.init_system","text":"Initialize the system and returns the handle Source code in pycaenhv/wrappers.py def init_system ( system_type : Union [ CAENHV_SYSTEM_TYPE , int ], link_type : Union [ LinkType , int ], argument : Any , username : str = '' , password : str = '' ) -> int : \"\"\" Initialize the system and returns the handle \"\"\" _handle = c_int () _system = int ( system_type ) _link = int ( link_type ) _arg = argument if isinstance ( _arg , str ): _arg = _arg . encode () err = CAENHV_InitSystem ( _system , _link , _arg , username . encode (), password . encode (), byref ( _handle )) check_function_output ( err ) return _handle . value","title":"init_system()"},{"location":"wrappers-reference/#pycaenhv.wrappers.set_channel_parameter","text":"Set channel parameter's value Source code in pycaenhv/wrappers.py def set_channel_parameter ( handle : int , slot : int , channel : int , param_name : str , value : Any ): \"\"\" Set channel parameter's value \"\"\" type_ = get_channel_parameter_property ( handle , slot , channel , param_name , \"Type\" ) _value = ParameterTypes [ type_ ]( ParameterPythonTypes [ type_ ]( value )) _slot = c_ushort ( slot ) _ch = c_ushort ( channel ) _param = c_char_p ( param_name . encode ()) _ch_list = ( c_ushort * 1 )() _ch_list [ 0 ] = channel res = CAENHV_SetChParam ( handle , _slot , _param , _ch , _ch_list , byref ( _value )) check_function_output ( res )","title":"set_channel_parameter()"},{"location":"wrappers-reference/#pycaenhv.wrappers.software_release","text":"Returns the software release of the library Source code in pycaenhv/wrappers.py def software_release () -> str : \"\"\" Returns the software release of the library \"\"\" return CAENHVLibSwRel () . decode ()","title":"software_release()"}]}